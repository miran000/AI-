graph = {
'5' : ['3','7'],
'3' : ['2','4'],
'7' : ['8','9'],
'2' : [],
"4" : ['6'],
'8' : [],
'9' : [],
'6' : [],


}
visited =[]
queue = []
parent = {}

def bfs_path(graph, start, goal):
    visited.append(start)
    queue.append(start)
    parent[start] = None

    while queue:
        node = queue.pop(0)


        if node == goal:
            path = []
            while node is not None:
                path.append(node)
                node=parent[node]
            return path[::-1]    # Reverse the path to get start -> goal
            
        for neighbor in graph[node]:
            if neighbor not in visited:
                visited.append(neighbor)
                queue.append(neighbor)
                parent [neighbor] = node # Set the current node as 

    return None # Return None if no path is found 

# Driver COde 
start = '5'
goal = '8'
print("Path from", start, "to", goal, ":", bfs_path(graph, start , goal))

                
